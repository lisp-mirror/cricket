(in-package #:%cricket.map)

(declaim (inline %make-map))
(defstruct (map
            (:constructor %make-map)
            (:predicate nil)
            (:copier nil))
  (width 512 :type u:ub24)
  (height 512 :type u:ub24)
  (data (make-array 0 :element-type 'u:f32) :type (simple-array u:f32 (*))))

(declaim (inline map-value))
(defun map-value (map x y)
  (aref (map-data map) (+ (* y (map-width map)) x)))

(declaim (inline (setf map-value)))
(defun (setf map-value) (value map x y)
  (setf (aref (map-data map) (+ (* y (map-width map)) x)) value))

(declaim (inline write-map))
(defun write-map (map source x-min x-delta y-min y-delta)
  (dotimes (y (map-height map))
    (let ((cy (+ (* y y-delta) y-min)))
      (dotimes (x (map-width map))
        (let ((cx (+ (* x x-delta) x-min)))
          (setf (map-value map x y) (int:sample source cx cy)))))))

(declaim (inline write-map/parallel))
(defun write-map/parallel (map source x-min x-delta y-min y-delta)
  (let ((lp:*kernel* (lp:make-kernel (cl-cpus:get-number-of-processors))))
    (lp:pdotimes (y (map-height map))
      (let ((cy (+ (* y y-delta) y-min)))
        (dotimes (x (map-width map))
          (let ((cx (+ (* x x-delta) x-min)))
            (setf (map-value map x y) (int:sample source cx cy))))))))

(defun make-map (source
                 &key (width 512) (height 512) (x-min -1.0) (x-max 1.0) (y-min -1.0) (y-max 1.0)
                   (parallel-p t))
  (let* ((data (make-array (* width height) :element-type 'u:f32 :initial-element 0.0))
         (map (%make-map :width width :height height :data data))
         (x-min (float x-min 1d0))
         (y-min (float y-min 1d0))
         (x-delta (float (/ (- x-max x-min) width) 1d0))
         (y-delta (float (/ (- y-max y-min) height) 1d0)))
    (if parallel-p
        (write-map/parallel map source x-min x-delta y-min y-delta)
        (write-map map source x-min x-delta y-min y-delta))
    map))

(u:fn-> render-map (map &key (:gradient symbol)) image)
(defun render-map (map &key (gradient :grayscale))
  (declare (optimize speed))
  (let* ((width (map-width map))
         (height (map-height map))
         (gradient (make-gradient gradient))
         (image (make-image width height)))
    (dotimes (y height)
      (dotimes (x width)
        (u:mvlet ((r g b a (get-gradient-color gradient (map-value map x y))))
          (set-image-channels image x y r g b a))))
    image))
